// Generated by CoffeeScript 1.3.3
(function() {
  var Future, Migrate, Migration, cwd, exec, fs, path, pgfibers, yaml, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  yaml = require('js-yaml');

  fs = require('fs');

  pgfibers = require('pg-fibers');

  Future = require('fibers/future');

  fs = require('fs');

  _ = require('underscore');

  path = require('path');

  cwd = process.cwd;

  exec = require('child_process').exec;

  Migration = (function() {

    function Migration(file) {
      this.down = __bind(this.down, this);

      this.up = __bind(this.up, this);

      var dir;
      dir = path.dirname(file);
      this.filename = path.basename(file);
      this.path = path.join(path.relative(__dirname, dir), this.filename);
    }

    Migration.prototype.up = function(db) {
      var m;
      m = require(this.path);
      if (m.up != null) {
        require(this.path).up(db);
        return db.query("insert into migrations(filename) values($1)", [this.filename]);
      }
    };

    Migration.prototype.down = function(db) {
      var m;
      m = require(this.path);
      if (m.down != null) {
        m.down(db);
        return db.query("delete from migrations where filename = $1", [this.filename]);
      }
    };

    return Migration;

  })();

  module.exports = Migrate = (function() {

    function Migrate(options) {
      this.options = options;
      this.create = __bind(this.create, this);

      this.down = __bind(this.down, this);

      this.up = __bind(this.up, this);

      this.transaction = __bind(this.transaction, this);

      this.unfinished = __bind(this.unfinished, this);

      this.finished = __bind(this.finished, this);

      this.available = __bind(this.available, this);

      this.sort = __bind(this.sort, this);

      this.init = __bind(this.init, this);

      this.query = __bind(this.query, this);

      this.dbconfig = require(this.options.config || path.join(process.cwd(), 'config/database.yml'));
      this.env = this.options.env || process.env.NODE_ENV || 'development';
      this.path = path.join(cwd(), this.options.migrations || './migrations');
    }

    Migrate.prototype.query = function(query, args) {
      return this.db.query(query, args || null).rows;
    };

    Migrate.prototype.init = function() {
      var sql;
      sql = "CREATE TABLE IF NOT EXISTS migrations (\n  id serial primary key,\n  filename varchar,\n  run_at timestamp default NOW()\n);";
      return this.query(sql);
    };

    Migrate.prototype.sort = function(migrations) {
      return migrations.sort(function(x, y) {
        return x.filename.localeCompare(y.filename);
      });
    };

    Migrate.prototype.available = function() {
      var f;
      return this._available || (this._available = this.sort((function() {
        var _i, _len, _ref, _results;
        _ref = fs.readdirSync(this.path);
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          f = _ref[_i];
          _results.push(new Migration(path.join(this.path, f)));
        }
        return _results;
      }).call(this)));
    };

    Migrate.prototype.finished = function() {
      var r;
      return this._finished = this.sort((function() {
        var _i, _len, _ref, _results;
        _ref = this.query("select filename from migrations");
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          r = _ref[_i];
          _results.push(new Migration(path.join(this.path, r.filename)));
        }
        return _results;
      }).call(this));
    };

    Migrate.prototype.unfinished = function() {
      return this._unfinished || (this._unfinished = _.difference(this.available(), this.finished()));
    };

    Migrate.prototype.transaction = function(cb) {
      this.query('BEGIN');
      try {
        cb();
        return this.query('COMMIT');
      } catch (e) {
        this.query('ROLLBACK');
        throw e;
      }
    };

    Migrate.prototype.up = function(steps) {
      var targets,
        _this = this;
      if (steps == null) {
        steps = null;
      }
      this.db = pgfibers.connect(this.dbconfig[this.env]);
      this.init();
      targets = this.available();
      if (steps) {
        targets = targets.slice(0, steps);
      }
      return this.transaction(function() {
        var m, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = targets.length; _i < _len; _i++) {
          m = targets[_i];
          _results.push(m.up(_this.db));
        }
        return _results;
      });
    };

    Migrate.prototype.down = function(steps) {
      var _this = this;
      this.db = pgfibers.connect(this.dbconfig[this.env]);
      this.init();
      return this.transaction(function() {
        var m, _i, _len, _ref, _results;
        _ref = _this.finished().reverse().slice(0, steps || 1);
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          m = _ref[_i];
          _results.push(m.down(_this.db));
        }
        return _results;
      });
    };

    Migrate.prototype.create = function(name, ext) {
      var f, filename, fullpath, timestamp;
      if (ext == null) {
        ext = 'coffee';
      }
      if (!fs.existsSync(this.path)) {
        fs.mkdirSync(this.path);
      }
      timestamp = Date.now();
      filename = "" + timestamp + "-" + name + "." + ext;
      fullpath = path.join(this.path, filename);
      f = new Future;
      exec("touch " + fullpath, f.resolver());
      f.wait();
      return filename;
    };

    return Migrate;

  })();

}).call(this);
